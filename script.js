"use strict";

const screen = document.getElementById("screen");
const xmlns = "http://www.w3.org/2000/svg";
const xlinkns = "http://www.w3.org/1999/xlink";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–∏—Ä–æ—Å–∫–æ–ø–∞
let gyroSupported = false;
let useGyroscope = false;

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
const addDebugInfo = () => {
	const debug = document.createElement('div');
	debug.id = 'debug-panel';
	debug.style.position = 'fixed';
	debug.style.bottom = '10px';
	debug.style.left = '10px';
	debug.style.zIndex = '2000';
	debug.style.background = 'rgba(0,0,0,0.9)';
	debug.style.color = '#09ff00';
	debug.style.padding = '8px';
	debug.style.fontSize = '10px';
	debug.style.fontFamily = 'monospace';
	debug.style.borderRadius = '5px';
	debug.style.maxWidth = '250px';
	debug.style.border = '1px solid #09ff00';
	debug.style.cursor = 'pointer';
	debug.innerHTML = `
		<div style="font-weight: bold; margin-bottom: 5px;">üêâ Debug Info (tap to toggle)</div>
		<div id="debug-content" style="display: none;">
			<div>Gyro: <span id="gyro-status">–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...</span></div>
			<div>X: <span id="gyro-x">0</span>, Y: <span id="gyro-y">0</span></div>
			<div>Browser: ${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'}</div>
			<div>DeviceOrientation: ${!!window.DeviceOrientationEvent ? '‚úì' : '‚úó'}</div>
		</div>
	`;
	
	// –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å
	debug.onclick = () => {
		const content = document.getElementById('debug-content');
		if (content.style.display === 'none') {
			content.style.display = 'block';
		} else {
			content.style.display = 'none';
		}
	};
	
	document.body.appendChild(debug);
	return debug;
};

const updatePointer = (e) => {
	if (!useGyroscope) {
		let newX = e.clientX || (e.touches && e.touches[0].clientX);
		let newY = e.clientY || (e.touches && e.touches[0].clientY);
		const margin = 50;
		pointer.x = Math.max(margin, Math.min(width - margin, newX));
		pointer.y = Math.max(margin, Math.min(height - margin, newY));
		rad = 0;
	}
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∏—Ä–æ—Å–∫–æ–ø–∞
const handleOrientation = (event) => {
	if (useGyroscope) {
		// gamma: –Ω–∞–∫–ª–æ–Ω –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ (-90 –¥–æ 90)
		// beta: –Ω–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥ (-180 –¥–æ 180)
		const gamma = event.gamma || 0; // –ª–µ–≤–æ-–ø—Ä–∞–≤–æ
		const beta = event.beta || 0;   // –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥
		
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ —É—Å–∏–ª–µ–Ω–∏–µ
		const sensitivity = 2.5; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è
		const gammaRange = 60;    // –î–∏–∞–ø–∞–∑–æ–Ω gamma (–≤–º–µ—Å—Ç–æ 90)
		const betaRange = 30;     // –î–∏–∞–ø–∞–∑–æ–Ω beta (–≤–º–µ—Å—Ç–æ 45)
		
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Å —É—Å–∏–ª–µ–Ω–∏–µ–º
		let x = (gamma + gammaRange) * width / (gammaRange * 2);
		let y = (beta + betaRange) * height / (betaRange * 2);
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–∏–ª–µ–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
		pointer.x = Math.max(0, Math.min(width, x * sensitivity - (width * (sensitivity - 1)) / 2));
		pointer.y = Math.max(0, Math.min(height, y * sensitivity - (height * (sensitivity - 1)) / 2));
		
		// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		const gyroX = document.getElementById('gyro-x');
		const gyroY = document.getElementById('gyro-y');
		if (gyroX) gyroX.textContent = gamma.toFixed(1);
		if (gyroY) gyroY.textContent = beta.toFixed(1);
		
		rad = 0;
	}
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–∏—Ä–æ—Å–∫–æ–ø–∞
const checkGyroSupport = () => {
	const statusEl = document.getElementById('gyro-status');
	
	if (window.DeviceOrientationEvent) {
		gyroSupported = true;
		if (statusEl) statusEl.textContent = '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
		console.log("–ì–∏—Ä–æ—Å–∫–æ–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!");
		return true;
	} else {
		if (statusEl) statusEl.textContent = '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
		console.log("–ì–∏—Ä–æ—Å–∫–æ–ø –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!");
		return false;
	}
};

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
const createSimpleGyroButton = () => {
	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const button = document.createElement('button');
	button.textContent = '–ì–∏—Ä–æ—Å–∫–æ–ø';
	button.style.position = 'fixed';
	button.style.top = '15px';
	button.style.right = '15px';
	button.style.zIndex = '1000';
	button.style.padding = '12px 16px';
	button.style.backgroundColor = '#09ff00';
	button.style.color = '#000';
	button.style.border = '2px solid #09ff00';
	button.style.borderRadius = '8px';
	button.style.cursor = 'pointer';
	button.style.fontSize = '14px';
	button.style.fontWeight = 'bold';
	button.style.boxShadow = '0 4px 8px rgba(9, 255, 0, 0.3)';
	button.style.transition = 'all 0.3s ease';
	button.style.userSelect = 'none';
	
	// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	if (window.innerWidth < 500) {
		button.style.fontSize = '12px';
		button.style.padding = '10px 14px';
		button.style.top = '10px';
		button.style.right = '10px';
	}
	
	button.onclick = () => {
		console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!");
		
		if (!gyroSupported) {
			alert('–ì–∏—Ä–æ—Å–∫–æ–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
			return;
		}
		
		useGyroscope = !useGyroscope;
		button.textContent = useGyroscope ? '–í—ã–∫–ª' : '–ì–∏—Ä–æ—Å–∫–æ–ø';
		button.style.backgroundColor = useGyroscope ? '#ff4444' : '#09ff00';
		
		if (useGyroscope) {
			// –î–ª—è iOS 13+ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
			if (typeof DeviceOrientationEvent.requestPermission === 'function') {
				console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è iOS...");
				DeviceOrientationEvent.requestPermission()
					.then(response => {
						console.log("–û—Ç–≤–µ—Ç iOS:", response);
						if (response == 'granted') {
							window.addEventListener('deviceorientation', handleOrientation, false);
							console.log("–ì–∏—Ä–æ—Å–∫–æ–ø –≤–∫–ª—é—á–µ–Ω (iOS)!");
							button.textContent = '–í—ã–∫–ª';
							button.style.backgroundColor = '#ff4444';
						} else {
							useGyroscope = false;
							button.textContent = '–ì–∏—Ä–æ—Å–∫–æ–ø';
							button.style.backgroundColor = '#09ff00';
							alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
						}
					})
					.catch(err => {
						console.error("–û—à–∏–±–∫–∞ iOS:", err);
						useGyroscope = false;
						button.textContent = '–ì–∏—Ä–æ—Å–∫–æ–ø';
						button.style.backgroundColor = '#09ff00';
						alert('–û—à–∏–±–∫–∞: ' + err.message);
					});
			} else {
				// –î–ª—è Android –∏ —Å—Ç–∞—Ä—ã—Ö iOS
				console.log("–í–∫–ª—é—á–∞–µ–º –≥–∏—Ä–æ—Å–∫–æ–ø –¥–ª—è Android...");
				window.addEventListener('deviceorientation', handleOrientation, false);
				console.log("–ì–∏—Ä–æ—Å–∫–æ–ø –≤–∫–ª—é—á–µ–Ω (Android)!");
				button.textContent = '–í—ã–∫–ª';
				button.style.backgroundColor = '#ff4444';
			}
		} else {
			window.removeEventListener('deviceorientation', handleOrientation, false);
			console.log("–ì–∏—Ä–æ—Å–∫–æ–ø –≤—ã–∫–ª—é—á–µ–Ω!");
			button.textContent = '–ì–∏—Ä–æ—Å–∫–æ–ø';
			button.style.backgroundColor = '#09ff00';
		}
	};
	
	document.body.appendChild(button);
	console.log("–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!");
};

window.addEventListener("pointermove", updatePointer, false);
window.addEventListener("touchmove", updatePointer, false);
window.addEventListener("mousemove", updatePointer, false);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
	console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ä–æ—Å–∫–æ–ø...");
	addDebugInfo();
	checkGyroSupport();
	createSimpleGyroButton();
});

// –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
document.addEventListener('DOMContentLoaded', () => {
	console.log("DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ä–æ—Å–∫–æ–ø...");
	addDebugInfo();
	checkGyroSupport();
	createSimpleGyroButton();
});

const resize = () => {
	width = window.innerWidth;
	height = window.innerHeight;
};

let width, height;
window.addEventListener("resize", () => resize(), false);
resize();

const prepend = (use, i) => {
	const elem = document.createElementNS(xmlns, "use");
	elems[i].use = elem;
	elem.setAttributeNS(xlinkns, "xlink:href", "#" + use);
	screen.prepend(elem);
};

const N = 40;

const elems = [];
for (let i = 0; i < N; i++) elems[i] = { use: null, x: width / 2, y: 0 };
const pointer = { x: width / 2, y: height / 2 };
const radm = Math.min(pointer.x, pointer.y) - 20;
let frm = Math.random();
let rad = 0;

for (let i = 1; i < N; i++) {
	if (i === 1) prepend("Cabeza", i);
	else if (i === 8 || i === 14) prepend("Aletas", i);
	else prepend("Espina", i);
	// –°–¥–µ–ª–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç —è—Ä–∫–æ-–Ω–µ–æ–Ω–æ–≤—ã–º
	if (elems[i] && elems[i].use) {
		elems[i].use.setAttribute("style", "filter: drop-shadow(0 0 16px #39ff14); stroke: #39ff14; fill: none;");
	}
}

const run = () => {
	requestAnimationFrame(run);
	let e = elems[0];
	const ax = (Math.cos(3 * frm) * rad * width) / height;
	const ay = (Math.sin(4 * frm) * rad * height) / width;
	e.x += (ax + pointer.x - e.x) / 10;
	e.y += (ay + pointer.y - e.y) / 10;
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–æ–ª–æ–≤—É –¥—Ä–∞–∫–æ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞ —Å —Ç–µ–º –∂–µ –æ—Ç—Å—Ç—É–ø–æ–º
	const margin = 50;
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö/–ø–ª–∞–Ω—à–µ—Ç–æ–≤
	let scaleFactor = 1;
	if (window.innerWidth < 500 || window.innerHeight < 500) {
		scaleFactor = 0.28; // –µ—â—ë –º–µ–Ω—å—à–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
	} else if (window.innerWidth < 900 || window.innerHeight < 900) {
		scaleFactor = 0.38; // –µ—â—ë –º–µ–Ω—å—à–µ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤
	} else {
		scaleFactor = 0.7; // —É–º–µ–Ω—å—à–∏—Ç—å –∏ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
	}
    e.x = Math.max(margin, Math.min(width - margin, e.x));
    e.y = Math.max(margin, Math.min(height - margin, e.y));
    for (let i = 1; i < N; i++) {
        let e = elems[i];
        let ep = elems[i - 1];
        const a = Math.atan2(e.y - ep.y, e.x - ep.x);
        e.x += (ep.x - e.x + (Math.cos(a) * (100 - i)) / 5) / 4;
        e.y += (ep.y - e.y + (Math.sin(a) * (100 - i)) / 5) / 4;
        const s = ((162 + 4 * (1 - i)) / 50) * scaleFactor;
        e.use.setAttributeNS(
            null,
            "transform",
            `translate(${(ep.x + e.x) / 2},${(ep.y + e.y) / 2}) rotate(${(180 / Math.PI) * a}) translate(${0},${0}) scale(${s},${s})`
        );
	}
	if (rad < radm) rad++;
	frm += 0.003;
	if (rad > 60) {
		pointer.x += (width / 2 - pointer.x) * 0.05;
		pointer.y += (height / 2 - pointer.y) * 0.05;
	}
};

run();